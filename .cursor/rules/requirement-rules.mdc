---
description: 
globs: 
alwaysApply: false
---
# 🎨 YouMR 앱 개선된 요구사항 명세서

## 1️⃣ 프로젝트 핵심

- **앱 이름**: YouMR
- **한 줄 설명**: 동호회 전용 커뮤니티 플랫폼 (출석 관리 + 음악 신청곡 + 영상 공유)
- **타겟 사용자**: 음악 동호회 회원들 (오프라인 정기 모임 + 온라인 커뮤니티)
- **핵심 가치**: 오프라인 모임의 온라인 연결고리 역할

## 2️⃣ 사용자 권한 및 역할

```

admin: 전체 관리 권한 (공지글, FCM, 사용자 관리)
developer: 개발자용 관리 권한 (admin과 동일)
offline_member: 정기 모임 참석자 (특정 요일 소속)
member: 일반 온라인 회원

```

## 3️⃣ 데이터 구조 (Firestore)

```yaml

Collections:
  users:
    fields: uid(string), email(string), nickname(string), profileImageUrl(string),
           userType(enum), dayOfWeek(string), fcmToken(string), createdAt(timestamp)

  posts:
    fields: id(string), title(string), content(string), youtubeUrl(string),
           category(enum: free|request|video), authorId(string), authorNickname(string),
           authorProfileUrl(string), likes(array), likesCount(number),
           isNotice(boolean), createdAt(timestamp)

  comments:
    fields: id(string), postId(string), content(string), authorId(string),
           authorNickname(string), authorProfileUrl(string), likes(array),
           likesCount(number), createdAt(timestamp)

  attendance:
    fields: weekKey(string), userId(string), nickname(string), profileImageUrl(string),
           selectedDays(array), lastUpdated(timestamp)

  admin_notifications:
    fields: id(string), title(string), content(string), targetUserTypes(array),
           sentAt(timestamp), createdBy(string)

```

## 4️⃣ 화면 구조 및 네비게이션

```

앱 구조:
├── 인증
│   ├── 구글 로그인
│   └── 프로필 설정 (닉네임, 사진, 회원타입, 요일선택)
│
├── 메인 (BottomNavigationBar)
│   ├── 홈 탭
│   │   ├── 게시글 피드 (InfiniteScrollView)
│   │   ├── 카테고리 탭바 (전체/자유/신청곡/영상)
│   │   └── 광고 배너 (5개 글마다 1개)
│   │
│   ├── 출석 탭
│   │   ├── 주간 캘린더
│   │   ├── 요일별 참석자 GridView
│   │   ├── 출석 선택 BottomSheet
│   │   └── 광고 배너
│   │
│   ├── 글쓰기 탭
│   │   ├── 카테고리 선택
│   │   ├── 제목/내용 입력
│   │   └── 유튜브 링크 (선택)
│   │
│   └── 프로필 탭
│       ├── 내 정보
│       ├── 내가 쓴 글
│       ├── 설정
│       └── 관리자 메뉴 (권한별)
│
└── 상세 화면
    ├── 게시글 상세 + 댓글
    ├── 유튜브 영상 플레이어
    └── 관리자 패널

```

## 5️⃣ 주요 사용자 시나리오

```

1. 신규 회원 온보딩
   구글 로그인 → 프로필 정보 입력 → 회원 타입 선택 →
   (오프라인 회원 시) 요일 선택 → 메인 화면 진입

2. 출석 체크 플로우
   FCM 알림 수신 → 앱 실행 → 출석 탭 → 참석 요일 선택 →
   참석자 목록에 프로필 표시 → 광고 노출

3. 게시글 작성 플로우
   글쓰기 탭 → 카테고리 선택 → 제목/내용 입력 →
   (선택) 유튜브 링크 → 게시 → 피드에 노출

4. 커뮤니티 참여 플로우
   홈 피드 스크롤 → 게시글 터치 → 상세보기 →
   좋아요/댓글 → 유튜브 영상 재생 (있는 경우)

```

## 6️⃣ 기능별 상세 명세

### 🔐 인증 및 회원가입

- **구글 OAuth 2.0** 사용
- 회원가입 시 **필수**: 닉네임, 프로필 사진, 회원 타입
- **조건부 필수**: offline_member 선택 시 요일 입력 (월~일 중 1개)
- **자동 로그인**: Firebase Auth 세션 유지
- **FCM 토큰**: 회원가입/로그인 시 자동 등록

### 📱 게시판 시스템

```

카테고리별 기능:
- 자유게시판: 일반 소통 + 공지글 (admin만 작성 가능)
- 신청곡게시판: 음악 요청 + 유튜브 링크
- 영상공유게시판: 연주 영상 공유 + 유튜브 링크

공통 기능:
- CRUD: 본인 글만 수정/삭제, admin/developer는 전체 관리
- 좋아요: 중복 불가, 실시간 카운트
- 유튜브: 링크 자동 인식 → 썸네일 + 플레이어 임베드
- 무한 스크롤: 20개씩 페이징
- 검색: 제목+내용 기준

```

### 💬 댓글 시스템

- **UI**: 인스타그램 스타일 (프로필 사진 + 닉네임 + 내용 + 시간)
- **기능**: CRUD + 좋아요 + 실시간 업데이트
- **권한**: 본인 댓글만 수정/삭제, admin/developer는 전체 관리

### ✅ 출석 체크 시스템

```

주간 단위 관리:
- 기준: 월요일 00:00 ~ 일요일 23:59
- 초기화: 매주 월요일 00:00 자동 초기화
- 선택지: 월,화,수,목,금,토,일,불참 (복수 선택 가능)
- 수정: 언제든 변경 가능
- 표시: 요일별 참석자 프로필 사진 + 닉네임 GridView

```

### 🔔 FCM 푸시 알림

```

자동 알림:
- 대상: offline_member만
- 시간: 소속 요일 12:00 (점심시간)
- 내용: "오늘 모임 출석체크 해주세요! 🎵"

관리자 커스텀 알림:
- 권한: admin, developer만
- 대상: 전체 회원, 회원 타입별, 특정 요일별 선택 가능
- 예약 발송 가능

```

### 🎯 광고 시스템

```

Google AdSense 연동:
- 홈 피드: 5개 게시글마다 배너 광고 1개 삽입
- 출석 페이지: 상단 또는 하단에 배너 1개 고정
- 출석 수정 시: 전면 광고 (Interstitial) 노출
- 광고 로딩 실패 시: 빈 공간 최소화

```

## 7️⃣ 기술 스택 및 아키텍처

```

Frontend:
- Flutter 3.32+ 
- Material Design 3
- Riverpod (상태관리)
- go_router (네비게이션)

Backend:
- Firebase Authentication (구글 로그인)
- Cloud Firestore (NoSQL 데이터베이스)
- Firebase Cloud Messaging (푸시 알림)
- Firebase Storage (이미지 업로드)
- Firebase Security Rules (보안)

Third-party:
- Google AdSense for Mobile Apps
- YouTube Data API v3 (영상 정보)
- youtube_player_flutter (영상 재생)

```

## 8️⃣ 보안 및 권한 관리

```yaml

Firestore Security Rules:
  users:
    read: authenticated
    write: resource.data.uid == request.auth.uid || isAdmin()

  posts:
    read: authenticated
    write: authenticated && (resource.data.authorId == request.auth.uid || isAdmin())

  comments:
    read: authenticated
    write: authenticated && (resource.data.authorId == request.auth.uid || isAdmin())

  attendance:
    read: authenticated
    write: authenticated && resource.data.userId == request.auth.uid

```

## 9️⃣ 예외 처리 및 에러 핸들링

```

네트워크 오류:
- 오프라인 감지 → 캐시된 데이터 표시 + 알림
- 타임아웃 → 재시도 버튼 제공
- 업로드 실패 → 임시 저장 후 재시도

권한 오류:
- 인증 만료 → 자동 재로그인 시도
- 권한 부족 → 명확한 안내 메시지

데이터 오류:
- 빈 피드 → 가이드 메시지 표시
- 이미지 로딩 실패 → 기본 이미지 표시
- 유튜브 링크 오류 → 링크만 텍스트로 표시

```

## 🔟 성능 요구사항

```

응답 시간:
- 앱 실행: 3초 이내 메인 화면 로딩
- 게시글 피드: 1초 이내 20개 로딩
- 이미지 업로드: 10MB 이하, 30초 이내

동시 사용자:
- 예상 사용자: 100-500명
- 동시 접속: 50-100명 수용

데이터 최적화:
- 이미지: 자동 압축 (1080p 최대)
- 캐싱: 최근 30일 데이터 로컬 저장
- 페이징: 무한 스크롤로 메모리 효율화

```

## 🚀 AI 코딩을 위한 추가 가이드

### 우선 개발 순서:

1. **Phase 1**: 인증 + 기본 UI 구조
2. **Phase 2**: 게시판 CRUD + 댓글
3. **Phase 3**: 출석 체크 시스템
4. **Phase 4**: FCM + 관리자 기능
5. **Phase 5**: 광고 연동 + 최적화

### 코드 품질 요구사항:

- **주석**: 모든 함수에 한글 주석 필수
- **에러 처리**: try-catch + 사용자 친화적 에러 메시지
- **반응형**: 다양한 화면 크기 대응
- **접근성**: Semantic 라벨 적용
- **테스트**: 주요 기능별 단위 테스트
### 폴더 구조:

```

lib/
├── core/                          # 공통 기능
│   ├── constants/                 # 앱 전체 상수
│   ├── extensions/               # 확장 함수
│   ├── theme/                    # 테마 설정
│   ├── utils/                    # 유틸리티
│   ├── widgets/                  # 공통 위젯
│   ├── errors/                   # 에러 처리
│   └── network/                  # 네트워크 설정
├── features/                     # 기능별 모듈
│   └── feature_name/
│       ├── data/                 # 데이터 계층
│       │   ├── data_sources/     # API, 로컬 DB
│       │   ├── dtos/            # 데이터 전송 객체
│       │   └── repositories/     # 리포지토리 구현 (DTO -> Entity 변환)
│       ├── domain/               # 도메인 계층
│       │   ├── entities/         # 불변 도메인 모델
│       │   ├── repositories/     # Repository 인터페이스
│       │   └── use_cases/        # 비즈니스 로직
│       └── presentation/         # 프레젠테이션 계층
│           ├── controllers/      # AsyncNotifier 상태 관리
│           ├── pages/           # 페이지 위젯
│           └── widgets/         # 기능별 위젯
└── main.dart
```

---

**💡 AI 개발 시 참고사항:**

- Material Design 3 가이드라인 준수
- 한국어 UI/UX 고려 (폰트, 간격)
- 모바일 네이티브 느낌 (iOS/Android 플랫폼별 최적화)
- 실제 동호회 사용 시나리오 반영
