---
description: 
globs: 
alwaysApply: false
---
# 🚀 현업 최적화 앱 개발 일일 보고서 템플릿

## 📋 기본 명령 구조

```
오늘 [날짜] [앱명] 개발 작업에 대한 일일 보고서를 작성해줘.

**📊 Executive Summary (30초 읽기)**
- 프로젝트 전체 상태: [🟢 정상진행 / 🟡 주의필요 / 🔴 위험상태]
- 오늘의 핵심 성과: [가장 중요한 1-2개 성과]
- 주요 블로커/리스크: [즉시 해결 필요한 이슈]
- 경영진 보고 필요사항: [예산/일정/인력 관련 이슈]

**🏗️ 프로젝트 컨텍스트**
- 앱명: [앱 이름 + 버전]
- 개발 플랫폼: [iOS/Android/크로스플랫폼 + 상세 기술]
- 프로젝트 단계: [현재 단계 + 다음 마일스톤까지 남은 기간]
- 프로젝트 유형: [신규/업데이트/리팩토링 + 규모]
- 팀 구성: [역할별 인원 + 가용성]
- 스프린트 정보: [현재 스프린트 + 목표 + 남은 기간]

**📈 오늘의 Key Metrics & Progress**
- 전체 진행률: [X%] (목표 대비 [±X%])
- 스프린트 진행률: [X%] (번다운 차트 상태)
- 완료된 스토리 포인트: [X SP / 총 X SP]
- 코드 품질 지표: [커버리지 X%, 기술부채 지수]
- 주요 KPI: [사용자 획득, 성능 지표 등]

**✅ 오늘 완료한 작업 (What Done)**
- [작업명] - [Jira티켓] - [소요시간] - [완성도 100%]
- [작업명] - [GitHub PR링크] - [리뷰상태] - [배포여부]
- [작업명] - [비즈니스 임팩트] - [다음단계]

**🔧 사용한 기술/도구/플랫폼**
- 개발: [언어, 프레임워크, 라이브러리]
- 인프라: [클라우드, DB, CI/CD 파이프라인]
- 협업: [커뮤니케이션 도구, 프로젝트 관리]
- 품질관리: [테스팅 도구, 모니터링]

**🚨 블로커 & 리스크 (Risk Management)**
**즉시 해결 필요 (🔴 High)**:
- [이슈명] - [영향도] - [해결 담당자] - [예상 해결일]

**주의 관찰 필요 (🟡 Medium)**:
- [이슈명] - [모니터링 주기] - [에스컬레이션 조건]

**해결된 이슈 (✅ Resolved)**:
- [이슈명] - [해결방법] - [재발방지 조치]

**🤝 팀 협업 & 의존성**
- 타팀 의존성: [팀명] - [의존사항] - [완료예정일] - [리스크]
- 외부 업체: [업체명] - [진행사항] - [이슈사항]
- 내부 커뮤니케이션: [회의, 리뷰, 승인 등 현황]

**🎯 내일의 Action Items (Tomorrow's Focus)**
**Must Do (P0)**:
- [작업명] - [담당자] - [예상소요시간] - [완료조건]

**Should Do (P1)**:
- [작업명] - [우선순위 조정 가능성] - [의존성]

**Could Do (P2)**:
- [작업명] - [여유시간 발생시 진행]

**📊 Business Impact & Insights**
- 비즈니스 목표 기여도: [정량적 지표]
- 사용자 가치 창출: [UX 개선, 신기능 등]
- 경쟁력 강화 요소: [차별화 포인트]
- 학습한 내용: [기술적/프로세스 개선점]

보고서는 [경영진용/PM용/개발팀용/크로스펑션팀용] 형태로 작성하고,
[요약형(1페이지)/표준형(2-3페이지)/상세형(4-5페이지)] 수준으로 작성해줘.

```

## 🎯 상황별 특화 템플릿

### 🚨 Critical Issue 발생시 (긴급 보고)

```
**🚨 URGENT - Critical Issue Report**
- 발생 시간: [정확한 시간]
- 영향 범위: [사용자수, 매출, 기능]
- 현재 상태: [조치 중/임시 해결/완전 해결]
- 담당자: [연락처 포함]
- 다음 업데이트 시간: [예정 시간]
- 경영진 보고: [필요/불필요 + 사유]

```

### 🎉 Major Milestone 달성시

```
**🎉 Major Milestone Achievement Report**
- 달성한 마일스톤: [구체적 목표]
- 비즈니스 임팩트: [매출, 사용자, 시장점유율]
- 팀 기여도: [개인별 하이라이트]
- 다음 목표: [구체적 계획]
- 축하 및 보상: [팀 모럴 관리]

```
### 📋 Sprint Review/Retrospective

```
**📋 Sprint Review Integration**
- Sprint 목표 달성률: [정량적 평가]
- Velocity 변화: [이전 스프린트 대비]
- 팀 만족도: [1-10 스케일]
- 개선 액션 아이템: [다음 스프린트 적용사항]
- 프로세스 변경: [실험 결과]

```

## 🔧 고급 분석 옵션

### 📊 데이터 드리븐 분석

```
추가로 다음 분석을 포함해줘:
- 개발 생산성 메트릭 (코드 라인수, 커밋 빈도, PR 처리 시간)
- 품질 지표 트렌드 (버그 발견율, 고객 리포트 감소율)
- 팀 효율성 분석 (미팅 시간, 집중 작업 시간, 인터럽션 빈도)
- 기술 부채 현황 (코드 복잡도, 리팩토링 필요 영역)
- 사용자 경험 메트릭 (앱 크래시율, 응답시간, 사용자 만족도)

```

### 🎨 시각적 대시보드

```
다음 시각적 요소들을 포함해줘:
- 📊 번다운 차트 (스프린트 진행률)
- 📈 팀 velocity 트렌드 (최근 6개 스프린트)
- 🎯 목표 vs 실제 달성률 비교
- 🚨 리스크 히트맵 (확률 vs 영향도)
- 👥 팀 워크로드 분산도
- 🔄 CI/CD 파이프라인 성공률

```

### 🎭 대상별 맞춤 보고서

```
**C-Level Executive용:**
- 비즈니스 ROI와 시장 영향
- 예산 및 리소스 효율성
- 경쟁사 대비 우위요소
- 규제 및 컴플라이언스 이슈

**Product Manager용:**
- 사용자 피드백 통합 현황
- 기능별 개발 우선순위 조정
- 로드맵 vs 실제 진행 차이
- A/B 테스트 및 데이터 분석

**Engineering Manager용:**
- 코드 품질 및 아키텍처 개선
- 팀 스킬 개발 및 멘토링
- 기술 스택 업그레이드 계획
- 채용 및 팀 확장 필요성

**DevOps/SRE용:**
- 인프라 안정성 및 확장성
- 보안 취약점 및 대응
- 배포 파이프라인 최적화
- 모니터링 및 알람 개선

```

## 📝 실전 예시 명령문

```
오늘 2025년 7월 2일 "FoodieConnect" 개발 작업에 대한 일일 보고서를 작성해줘.

**📊 Executive Summary**
- 프로젝트 전체 상태: 🟡 주의필요 (iOS 앱스토어 리뷰 지연)
- 오늘의 핵심 성과: 사용자 인증 시스템 완료, 결제 API 통합 80% 완료
- 주요 블로커/리스크: 앱스토어 심사 가이드라인 변경으로 출시 1주 지연 예상
- 경영진 보고 필요사항: 마케팅 캠페인 일정 1주 연기 검토 필요

**🏗️ 프로젝트 컨텍스트**
- 앱명: FoodieConnect v1.0 (MVP)
- 개발 플랫폼: React Native (iOS/Android 동시 개발)
- 프로젝트 단계: 베타 테스트 준비 (앱스토어 제출까지 5일)
- 프로젝트 유형: 신규 개발 (소셜 음식 공유 플랫폼)
- 팀 구성: 프론트엔드 2명, 백엔드 2명, 디자이너 1명, PM 1명
- 스프린트 정보: Sprint 8/10, 목표: 앱스토어 제출 준비, 남은 기간: 3일

**📈 오늘의 Key Metrics & Progress**
- 전체 진행률: 87% (목표 90% 대비 -3%)
- 스프린트 진행률: 78% (번다운 차트: 약간 지연)
- 완료된 스토리 포인트: 23 SP / 30 SP
- 코드 품질 지표: 테스트 커버리지 85%, 기술부채 지수 Medium
- 주요 KPI: 베타 사용자 150명 확보, 앱 크래시율 0.1%

**✅ 오늘 완료한 작업**
- Apple/Google 로그인 통합 - FOOD-234 - 4시간 - 100% 완료
- 결제 시스템 Stripe 연동 - FOOD-235 - 6시간 - 80% 완료 (내일 QA)
- 푸시 알림 개인화 설정 - FOOD-236 - 2시간 - 100% 완료
- 앱스토어 메타데이터 최적화 - FOOD-240 - 1시간 - 100% 완료

**🔧 사용한 기술/도구/플랫폼**
- 개발: React Native, TypeScript, Redux Toolkit
- 인프라: AWS (Lambda, RDS, S3), Firebase (Auth, FCM)
- 협업: Slack, Jira, Figma, GitHub
- 품질관리: Jest, Detox, CodePush, Sentry

**🚨 블로커 & 리스크**
**즉시 해결 필요 (🔴 High)**:
- iOS 앱스토어 가이드라인 변경 대응 - 출시일 1주 지연 - 개발팀 전체 - 7/5까지

**주의 관찰 필요 (🟡 Medium)**:
- 서버 부하 테스트 미완료 - 매일 모니터링 - 사용자 500명 도달시 긴급 대응

**✅ 해결된 이슈**:
- Android 빌드 에러 - Gradle 버전 업그레이드로 해결 - 재발방지: CI/CD 파이프라인 개선

**🤝 팀 협업 & 의존성**
- 디자인팀: 최종 UI 에셋 전달 완료 - 이슈 없음
- 마케팅팀: 앱스토어 설명 문구 검토 - 7/3 완료 예정
- 법무팀: 개인정보처리방침 승인 - 7/4 완료 예정 - 지연시 출시 추가 지연

**🎯 내일의 Action Items**
**Must Do (P0)**:
- 결제 시스템 QA 및 버그 수정 - 김개발 - 4시간 - 모든 결제 시나리오 테스트 통과
- iOS 앱스토어 가이드라인 대응 개발 - 박개발 - 8시간 - 애플 요구사항 100% 준수

**Should Do (P1)**:
- 서버 성능 최적화 - 이백엔드 - 6시간 - API 응답시간 200ms 이하

**Could Do (P2)**:
- 앱 아이콘 A/B 테스트 준비 - 최디자인 - 2시간 - 시간 여유시 진행

**📊 Business Impact & Insights**
- 비즈니스 목표 기여도: 베타 사용자 목표 대비 150% 달성
- 사용자 가치 창출: 소셜 로그인으로 회원가입 완료율 40% 증가
- 경쟁력 강화 요소: 실시간 위치 기반 맛집 추천 알고리즘 차별화
- 학습한 내용: 앱스토어 정책 변화에 대한 사전 모니터링 체계 필요

보고서는 PM용 형태로 작성하고, 표준형(2-3페이지) 수준으로 작성해줘.

```

## 🎖️ 템플릿 사용 가이드라인

### ✅ DO - 효과적인 사용법

- **구체적 수치 제공**: "많이", "빨리" 대신 정확한 숫자 사용
- **액션 지향적 작성**: 문제 식별 + 해결책 + 담당자 + 일정
- **이전 보고서와 연결**: 어제 이슈의 오늘 해결 상황 추적
- **이해관계자별 맞춤**: 대상 독자에 따른 정보 깊이 조절
- **시각적 요소 활용**: 이모지, 색상 코드로 가독성 향상

### ❌ DON'T - 피해야 할 실수

- **주관적 표현 금지**: "열심히 했다", "잘 진행되고 있다" 등
- **기술 용어 남발**: 비개발자 독자 고려한 설명 포함
- **문제 은폐 시도**: 이슈는 조기에 투명하게 공유
- **과도한 세부사항**: 핵심만 간추려서 보고
- **액션 아이템 누락**: 모든 이슈에 대한 해결 계획 포함

### 🔄 지속적 개선

- **템플릿 피드백 수집**: 매주 보고서 효과성 검토
- **자동화 도구 연동**: Jira, GitHub 데이터 자동 추출
- **메트릭 기준 정립**: 팀별 KPI와 성공 지표 표준화
- **보고서 아카이브**: 프로젝트 히스토리와 학습 자료로 활용
